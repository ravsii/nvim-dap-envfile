*nvim-dap-envfile.txt*    For Neovim >= 0.10.4    Last change: 2025 October 21

==============================================================================
Table of Contents                         *nvim-dap-envfile-table-of-contents*

1. nvim-dap-envfile                        |nvim-dap-envfile-nvim-dap-envfile|
  - Installation              |nvim-dap-envfile-nvim-dap-envfile-installation|
  - Configuration            |nvim-dap-envfile-nvim-dap-envfile-configuration|
  - Examples                      |nvim-dap-envfile-nvim-dap-envfile-examples|
  - API Reference            |nvim-dap-envfile-nvim-dap-envfile-api-reference|

==============================================================================
1. nvim-dap-envfile                        *nvim-dap-envfile-nvim-dap-envfile*

A lightweight helper for **nvim-dap**
<https://github.com/mfussenegger/nvim-dap> that automatically loads `.env`
files into your DAP configuration - with support for VSCode - style variable
expansion like `${workspaceFolder}`, and `${env:HOME}`.

Handling of the `envFile` field is, apparently, VS Code-specific. nvim-dap
doesn’t support it by default
<https://github.com/mfussenegger/nvim-dap/discussions/548>, so this plugin
provides that functionality. It’s simple but removes the need to repeat the
same code across multiple projects.


INSTALLATION                  *nvim-dap-envfile-nvim-dap-envfile-installation*


REQUIREMENTS ~

- Neovim >= `10.4`
- nvim-dap <https://github.com/mfussenegger/nvim-dap>


USING LAZY.NVIM ~

>lua
    {
      "ravsii/nvim-dap-envfile",
      dependencies = { "mfussenegger/nvim-dap" },
      opts = {},
    }
<


CONFIGURATION                *nvim-dap-envfile-nvim-dap-envfile-configuration*

Default configuration, for reference:

>lua
    ---@class Config
    local default_config = {
      ---Automatically adds a dap on_config listener.
      ---@type boolean?
      add_dap_listener = true,
      ---Print additional debug messages. Useful to check what your inputs are
      ---evaluating to.
      ---@type boolean?
      debug = false,
    }
<

You can disable adding dap listener on startup, if you want to handle it
manually.


EXAMPLES                          *nvim-dap-envfile-nvim-dap-envfile-examples*


USING ENVFILE ~

Your project-local `.nvim.lua` or any other per-project configuration file.

>lua
    local dap = require("dap")
    
    table.insert(dap.configurations.go, {
      name = "some project",
      type = "go",
      request = "launch",
      timeout = 10000,
      outputMode = "remote",
      program = "main.go",
      envFile = "${workspaceFolder}/.env", -- will be read, parsed, and passed as "env" table.
    })
<


USING MANUAL PARSING ~

>lua
    local dap = require("dap")
    local envfile = require("nvim-dap-envfile")
    
    table.insert(dap.configurations.go, {
      name = "some project",
      type = "go",
      request = "launch",
      program = "main.go",
      env = envfile.load_env_file("${workspaceFolder}/.env"),
    })
<


API REFERENCE                *nvim-dap-envfile-nvim-dap-envfile-api-reference*

In case you don’t want to use built-in dap listener (or you want to build a
custom one), you can still use our helper functions

>lua
    local envfile = require("nvim-dap-envfile")
<


ENVFILE.EVAL_VARS(STR: STRING) -> STRING ~

Expands VS Code–style variables inside a string. For available variables see
below.

>lua
    local resolved = envfile.eval_vars("${workspaceFolder}/.env")
    -- e.g. "/home/user/project/.env"
<


ENVFILE.LOAD_ENV_FILE(PATH: STRING) -> TABLE ~

Parses a `.env` file and returns a Lua table of key/value pairs. Path is
evaluated using `eval_vars`.

>lua
    local env = envfile.load_env_file("${workspaceFolder}/.env")
    vim.print(env)
    -- { DB_HOST = "localhost", PORT = "8080" }
<

Quotes around values (`"foo"` or `'foo'`) are stripped automatically.


VARIABLE EXPANSION ~

  Variable                     Example Result
  ---------------------------- ----------------------------
  ${file}                      /home/user/project/main.go
  ${fileBasename}              main.go
  ${fileBasenameNoExtension}   main
  ${fileDirname}               /home/user/project
  ${fileExtname}               go
  ${relativeFile}              main.go
  ${relativeFileDirname}       .
  ${workspaceFolder}           /home/user/project
  ${workspaceFolderBasename}   project
  ${env:HOME}                  /home/user

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
